# https://leetcode.com/problems/container-with-most-water/description/

# brute force with early termination, time complexity 0(n^2), too slow
class Solution:
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        max_vol = 0
        for i in range(len(height)-1): # left index
            if height[i] < max_vol/(len(height)-i-1):
                continue
            for j in range(len(height)-1, i, -1): # right index
                width = j-i
                if height[i] < max_vol/width:
                    break
                tall = min(height[i], height[j])
                vol = tall*width
                if vol > max_vol:
                    max_vol = vol
        return max_vol
        
#  88% 64ms, two pointer algorithm in solution time complexity: O(n)
class Solution:
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        l = 0  # left pointer index
        r = len(height)-1  # right pointer index
        max_vol = 0
        while not l == r:
            vol = min(height[l], height[r]) * (r-l)
            if vol > max_vol:
                max_vol = vol
            if height[l] < height[r]:
                l += 1
            else:
                r -= 1
        return max_vol
